links {
    SeqVariant {
        cosmic = { rec ->
            return rec.cosmic.tokenize(',').collect { cos ->
                def m = (cos =~ /COSM([0-9]+)/)
                if (m) {
                    cos = m[0][1]
                }
                def r = [:]
                r.anchor = cos
                r.base   = 'https://cancer.sanger.ac.uk/'
                r.path   = 'cosmic/mutation/overview'
                r.params = ['id': cos]
                return r
            }
        }
    }
    SeqCnv {
        gaffa {
            base = "http://gaffa.unix.petermac.org.au/"
            params = { rec ->
                def ps = [:]
                ps.locked = 'TRUE'
                ps.debug = 'T'
                ps.index_path = 'CNV'
                ps.collection = 'Molpath'
                ps.run = rec.seqSample.seqrun.seqrun
                ps.sample = rec.seqSample.sampleName
                ps.panel = rec.seqSample.panel.manifest
                if (rec.resolution == 'gene') {
                    ps.gene_id = rec.gene
                } else {
                    ps.locus = "${rec.chr}:${rec.start}-${rec.end}"
                }
                return ps
            }
        }
    }
}
